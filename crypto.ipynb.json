{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import statsmodels.api as sm\n",
    "from collections import Counter\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/coin_ChainLink.csv\")\n",
    "df1 = pd.read_csv(\"data/coin_Iota.csv\")\n",
    "df2 = pd.read_csv(\"data/coin_Cardano.csv\")\n",
    "df3 = pd.read_csv(\"data/coin_Dogecoin.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data has already been cleaned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SNo          0.0\n",
       "Name         0.0\n",
       "Symbol       0.0\n",
       "Date         0.0\n",
       "High         0.0\n",
       "Low          0.0\n",
       "Open         0.0\n",
       "Close        0.0\n",
       "Volume       0.0\n",
       "Marketcap    0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().mean()\n",
    "df1.isna().mean()\n",
    "df2.isna().mean()\n",
    "df3.isna().mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SNo</th>\n",
       "      <th>Name</th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Date</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Marketcap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2017-10-02 23:59:59</td>\n",
       "      <td>0.030088</td>\n",
       "      <td>0.019969</td>\n",
       "      <td>0.024607</td>\n",
       "      <td>0.025932</td>\n",
       "      <td>5.764130e+07</td>\n",
       "      <td>6.288991e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2017-10-03 23:59:59</td>\n",
       "      <td>0.027425</td>\n",
       "      <td>0.020690</td>\n",
       "      <td>0.025757</td>\n",
       "      <td>0.020816</td>\n",
       "      <td>1.699780e+07</td>\n",
       "      <td>5.396927e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2017-10-04 23:59:59</td>\n",
       "      <td>0.022806</td>\n",
       "      <td>0.020864</td>\n",
       "      <td>0.020864</td>\n",
       "      <td>0.021931</td>\n",
       "      <td>9.000050e+06</td>\n",
       "      <td>5.686195e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2017-10-05 23:59:59</td>\n",
       "      <td>0.022154</td>\n",
       "      <td>0.020859</td>\n",
       "      <td>0.021951</td>\n",
       "      <td>0.021489</td>\n",
       "      <td>5.562510e+06</td>\n",
       "      <td>5.571390e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2017-10-06 23:59:59</td>\n",
       "      <td>0.021542</td>\n",
       "      <td>0.018360</td>\n",
       "      <td>0.021359</td>\n",
       "      <td>0.018539</td>\n",
       "      <td>7.780710e+06</td>\n",
       "      <td>4.806646e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1240</th>\n",
       "      <td>1241</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2021-02-23 23:59:59</td>\n",
       "      <td>1.133705</td>\n",
       "      <td>0.824145</td>\n",
       "      <td>1.098769</td>\n",
       "      <td>0.954709</td>\n",
       "      <td>1.120190e+10</td>\n",
       "      <td>2.970337e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1241</th>\n",
       "      <td>1242</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2021-02-24 23:59:59</td>\n",
       "      <td>1.074832</td>\n",
       "      <td>0.902583</td>\n",
       "      <td>0.954958</td>\n",
       "      <td>1.051657</td>\n",
       "      <td>8.481335e+09</td>\n",
       "      <td>3.271965e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1242</th>\n",
       "      <td>1243</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2021-02-25 23:59:59</td>\n",
       "      <td>1.172732</td>\n",
       "      <td>1.017986</td>\n",
       "      <td>1.051349</td>\n",
       "      <td>1.079116</td>\n",
       "      <td>8.248286e+09</td>\n",
       "      <td>3.357399e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1243</th>\n",
       "      <td>1244</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2021-02-26 23:59:59</td>\n",
       "      <td>1.290047</td>\n",
       "      <td>0.995150</td>\n",
       "      <td>1.080828</td>\n",
       "      <td>1.241105</td>\n",
       "      <td>1.488414e+10</td>\n",
       "      <td>3.861387e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1244</th>\n",
       "      <td>1245</td>\n",
       "      <td>Cardano</td>\n",
       "      <td>ADA</td>\n",
       "      <td>2021-02-27 23:59:59</td>\n",
       "      <td>1.476653</td>\n",
       "      <td>1.234138</td>\n",
       "      <td>1.242145</td>\n",
       "      <td>1.324860</td>\n",
       "      <td>1.914198e+10</td>\n",
       "      <td>4.121970e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1245 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       SNo     Name Symbol                 Date      High       Low      Open  \\\n",
       "0        1  Cardano    ADA  2017-10-02 23:59:59  0.030088  0.019969  0.024607   \n",
       "1        2  Cardano    ADA  2017-10-03 23:59:59  0.027425  0.020690  0.025757   \n",
       "2        3  Cardano    ADA  2017-10-04 23:59:59  0.022806  0.020864  0.020864   \n",
       "3        4  Cardano    ADA  2017-10-05 23:59:59  0.022154  0.020859  0.021951   \n",
       "4        5  Cardano    ADA  2017-10-06 23:59:59  0.021542  0.018360  0.021359   \n",
       "...    ...      ...    ...                  ...       ...       ...       ...   \n",
       "1240  1241  Cardano    ADA  2021-02-23 23:59:59  1.133705  0.824145  1.098769   \n",
       "1241  1242  Cardano    ADA  2021-02-24 23:59:59  1.074832  0.902583  0.954958   \n",
       "1242  1243  Cardano    ADA  2021-02-25 23:59:59  1.172732  1.017986  1.051349   \n",
       "1243  1244  Cardano    ADA  2021-02-26 23:59:59  1.290047  0.995150  1.080828   \n",
       "1244  1245  Cardano    ADA  2021-02-27 23:59:59  1.476653  1.234138  1.242145   \n",
       "\n",
       "         Close        Volume     Marketcap  \n",
       "0     0.025932  5.764130e+07  6.288991e+08  \n",
       "1     0.020816  1.699780e+07  5.396927e+08  \n",
       "2     0.021931  9.000050e+06  5.686195e+08  \n",
       "3     0.021489  5.562510e+06  5.571390e+08  \n",
       "4     0.018539  7.780710e+06  4.806646e+08  \n",
       "...        ...           ...           ...  \n",
       "1240  0.954709  1.120190e+10  2.970337e+10  \n",
       "1241  1.051657  8.481335e+09  3.271965e+10  \n",
       "1242  1.079116  8.248286e+09  3.357399e+10  \n",
       "1243  1.241105  1.488414e+10  3.861387e+10  \n",
       "1244  1.324860  1.914198e+10  4.121970e+10  \n",
       "\n",
       "[1245 rows x 10 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "About the columns:\n",
    "Symbol - Refers to the abbreviation of the coin\n",
    "Date - The time at which the certain row values pertain to. This is always at the end of day, as high's and low's are calculated after all ups and downs throughout the day\n",
    "High - The peak value of the coin that day\n",
    "Low - The bottom value of the coin that day\n",
    "Close - Value of the coin after the market closes\n",
    "Open - The value at which it started out the day (This can wary from the close value of the previous day)\n",
    "Volume - The number of these crypto coins that are currently being moved\n",
    "MarketCap - The number of these crypto coins that are currently availabled to be traded/purchased"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "dftemp = df[0:0]\n",
    "df1temp = df1[0:0]\n",
    "df2temp = df2[0:0]\n",
    "df3temp = df3[0:0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in range(11,20):\n",
    "    df1temp = df1temp.append(df1[df1['Date']=='2020-10-'+ str(x) +' 23:59:59'], ignore_index=True)\n",
    "    dftemp = dftemp.append(df[df['Date']=='2020-10-'+ str(x) +' 23:59:59'], ignore_index=True)\n",
    "    df2temp = df2temp.append(df2[df2['Date']=='2020-10-'+ str(x) +' 23:59:59'], ignore_index=True)\n",
    "    df3temp = df3temp.append(df3[df3['Date']=='2020-10-'+ str(x) +' 23:59:59'], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in range(0,9):\n",
    "    temp = dftemp.iloc[x, 3]\n",
    "    dftemp.at[x,'Date'] = temp[8:10]\n",
    "    temp = df1temp.iloc[x, 3]\n",
    "    df1temp.at[x,'Date'] = temp[8:10]\n",
    "    temp = df2temp.iloc[x, 3]\n",
    "    df2temp.at[x,'Date'] = temp[8:10]\n",
    "    temp = df3temp.iloc[x, 3]\n",
    "    df3temp.at[x,'Date'] = temp[8:10]\n",
    "    \n",
    "#This was done as I only want the day, as the month and year stay constant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "x2 = []\n",
    "y2 = []\n",
    "for x in range(0,9):\n",
    "    x2.append(df1temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y2.append(df1temp.iloc[x, 4])\n",
    "x3 = []\n",
    "y3 = []\n",
    "for x in range(0,9):\n",
    "    x3.append(df2temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y3.append(df2temp.iloc[x, 4])\n",
    "x4 = []\n",
    "y4 = []\n",
    "for x in range(0,9):\n",
    "    x4.append(df3temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y4.append(df3temp.iloc[x, 4])\n",
    "\n",
    "#plt.plot(x1, y1, label = \"Aave\")\n",
    "plt.plot(x2, y2, label = \"Iota\")\n",
    "plt.plot(x3, y3, label = \"Cardano\")\n",
    "plt.plot(x4, y4, label = \"Dogecoin\")\n",
    "plt.legend()\n",
    "plt.xlabel('Day')\n",
    "plt.ylabel('High')\n",
    "plt.title('High Record for 2020, October')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As it can be seen the Iota coin seems to be plateauing its downfall. At the 19th day, it is evident that the coin may start to rise back up\n",
    "The Cardano coin and Dogecoin appear to have a very linear form, thus can be said to be staying constant"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x2 = []\n",
    "y2 = []\n",
    "for x in range(0,9):\n",
    "    x2.append(df1temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y2.append(df1temp.iloc[x, 5])\n",
    "x3 = []\n",
    "y3 = []\n",
    "for x in range(0,9):\n",
    "    x3.append(df2temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y3.append(df2temp.iloc[x, 5])\n",
    "x4 = []\n",
    "y4 = []\n",
    "for x in range(0,9):\n",
    "    x4.append(df3temp.iloc[x, 3])\n",
    "for x in range(0,9):\n",
    "    y4.append(df3temp.iloc[x, 5])\n",
    "\n",
    "#plt.plot(x1, y1, label = \"Aave\")\n",
    "plt.plot(x2, y2, label = \"Iota\")\n",
    "plt.plot(x3, y3, label = \"Cardano\")\n",
    "plt.plot(x4, y4, label = \"Dogecoin\")\n",
    "plt.legend()\n",
    "plt.xlabel('Day')\n",
    "plt.ylabel('High')\n",
    "plt.title('Low Record for 2020, October')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The cardano and doge coin appear to have very flat lows that do not change very much. Thus they could be said to be low risk investments for new cypto investors. The Iota coin appears to be experiencing a steady decrease in low value. Which can prove it to be getting better for quick buys and sells."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SNo</th>\n",
       "      <th>Name</th>\n",
       "      <th>Symbol</th>\n",
       "      <th>Date</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Marketcap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2017-09-21 23:59:59</td>\n",
       "      <td>0.207892</td>\n",
       "      <td>0.155292</td>\n",
       "      <td>0.189132</td>\n",
       "      <td>0.169680</td>\n",
       "      <td>2.126270e+06</td>\n",
       "      <td>5.938800e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2017-09-22 23:59:59</td>\n",
       "      <td>0.181675</td>\n",
       "      <td>0.139869</td>\n",
       "      <td>0.169826</td>\n",
       "      <td>0.150503</td>\n",
       "      <td>1.423220e+06</td>\n",
       "      <td>5.267605e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2017-09-23 23:59:59</td>\n",
       "      <td>0.157440</td>\n",
       "      <td>0.126297</td>\n",
       "      <td>0.149562</td>\n",
       "      <td>0.131129</td>\n",
       "      <td>1.186670e+06</td>\n",
       "      <td>4.589515e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2017-09-24 23:59:59</td>\n",
       "      <td>0.190250</td>\n",
       "      <td>0.130275</td>\n",
       "      <td>0.131110</td>\n",
       "      <td>0.170278</td>\n",
       "      <td>1.025740e+06</td>\n",
       "      <td>5.959730e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2017-09-25 23:59:59</td>\n",
       "      <td>0.182637</td>\n",
       "      <td>0.158580</td>\n",
       "      <td>0.170636</td>\n",
       "      <td>0.182198</td>\n",
       "      <td>1.021370e+06</td>\n",
       "      <td>6.376930e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>496</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2019-01-29 23:59:59</td>\n",
       "      <td>0.462636</td>\n",
       "      <td>0.412659</td>\n",
       "      <td>0.413458</td>\n",
       "      <td>0.455235</td>\n",
       "      <td>1.899844e+07</td>\n",
       "      <td>1.593322e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>497</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2019-01-30 23:59:59</td>\n",
       "      <td>0.453444</td>\n",
       "      <td>0.421108</td>\n",
       "      <td>0.453444</td>\n",
       "      <td>0.426929</td>\n",
       "      <td>8.965899e+06</td>\n",
       "      <td>1.494251e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>498</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2019-01-31 23:59:59</td>\n",
       "      <td>0.440094</td>\n",
       "      <td>0.386335</td>\n",
       "      <td>0.429458</td>\n",
       "      <td>0.387690</td>\n",
       "      <td>7.507124e+06</td>\n",
       "      <td>1.356916e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>499</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2019-02-01 23:59:59</td>\n",
       "      <td>0.428248</td>\n",
       "      <td>0.383756</td>\n",
       "      <td>0.387798</td>\n",
       "      <td>0.419263</td>\n",
       "      <td>5.696881e+06</td>\n",
       "      <td>1.467422e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>500</td>\n",
       "      <td>Chainlink</td>\n",
       "      <td>LINK</td>\n",
       "      <td>2019-02-02 23:59:59</td>\n",
       "      <td>0.431468</td>\n",
       "      <td>0.401940</td>\n",
       "      <td>0.418132</td>\n",
       "      <td>0.414927</td>\n",
       "      <td>4.128147e+06</td>\n",
       "      <td>1.452245e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     SNo       Name Symbol                 Date      High       Low      Open  \\\n",
       "0      1  Chainlink   LINK  2017-09-21 23:59:59  0.207892  0.155292  0.189132   \n",
       "1      2  Chainlink   LINK  2017-09-22 23:59:59  0.181675  0.139869  0.169826   \n",
       "2      3  Chainlink   LINK  2017-09-23 23:59:59  0.157440  0.126297  0.149562   \n",
       "3      4  Chainlink   LINK  2017-09-24 23:59:59  0.190250  0.130275  0.131110   \n",
       "4      5  Chainlink   LINK  2017-09-25 23:59:59  0.182637  0.158580  0.170636   \n",
       "..   ...        ...    ...                  ...       ...       ...       ...   \n",
       "495  496  Chainlink   LINK  2019-01-29 23:59:59  0.462636  0.412659  0.413458   \n",
       "496  497  Chainlink   LINK  2019-01-30 23:59:59  0.453444  0.421108  0.453444   \n",
       "497  498  Chainlink   LINK  2019-01-31 23:59:59  0.440094  0.386335  0.429458   \n",
       "498  499  Chainlink   LINK  2019-02-01 23:59:59  0.428248  0.383756  0.387798   \n",
       "499  500  Chainlink   LINK  2019-02-02 23:59:59  0.431468  0.401940  0.418132   \n",
       "\n",
       "        Close        Volume     Marketcap  \n",
       "0    0.169680  2.126270e+06  5.938800e+07  \n",
       "1    0.150503  1.423220e+06  5.267605e+07  \n",
       "2    0.131129  1.186670e+06  4.589515e+07  \n",
       "3    0.170278  1.025740e+06  5.959730e+07  \n",
       "4    0.182198  1.021370e+06  6.376930e+07  \n",
       "..        ...           ...           ...  \n",
       "495  0.455235  1.899844e+07  1.593322e+08  \n",
       "496  0.426929  8.965899e+06  1.494251e+08  \n",
       "497  0.387690  7.507124e+06  1.356916e+08  \n",
       "498  0.419263  5.696881e+06  1.467422e+08  \n",
       "499  0.414927  4.128147e+06  1.452245e+08  \n",
       "\n",
       "[500 rows x 10 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = df.head(500)\n",
    "x = df[['Low', 'Open', 'Close', 'Volume', 'Marketcap']]\n",
    "y = df['High']\n",
    "for col in x.columns:\n",
    "    plt.figure()\n",
    "    plt.scatter(x[col], y)\n",
    "    sns.regplot(x[col], y)\n",
    "    plt.ylabel('High')\n",
    "    plt.xlabel(col)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The the line of best fit found on these models can be used to predict future HIGH data based on changing x values.\n",
    "These trends that are found in these graphs can help traders find near linear relations that allow them to further predict the spiking or falling of values.\n",
    "It also shows how some factors do not contributre much the value of the coin."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Suggested date to enter is 2020, October, 11-15/ln YY-MM-DD\n",
      "Enter a date d\n",
      "How many days would you like to look ahead? d\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: 'd'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-8cf7fb1bb612>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Suggested date to enter is 2020, October, 11-15/ln YY-MM-DD\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter a date \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mtimes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"How many days would you like to look ahead? \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnewdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" 23:59:59\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'd'"
     ]
    }
   ],
   "source": [
    "print(\"Suggested date to enter is 2020, October, 11-15\")\n",
    "print(\"Format: YY-MM-DD\")\n",
    "date = str(input(\"Enter a date \"))\n",
    "times = int(input(\"How many days would you like to look ahead? \"))\n",
    "\n",
    "newdate = date + \" 23:59:59\"\n",
    "df1111 = df1.loc[df1['Date']==newdate]\n",
    "df0000 = df3.loc[df3['Date']==newdate]\n",
    "df2222 = df2.loc[df2['Date']==newdate]\n",
    "\n",
    "num = df0000.iloc[0, 4]\n",
    "num1 = df1111.iloc[0, 4]\n",
    "num2 = df2222.iloc[0, 4]\n",
    "data = [num,num1,num2]\n",
    "label = \"Iota\",'Cardano', 'Dogecoin'\n",
    "colors1 = ['lightblue','lightsteelblue','silver']\n",
    "move = (0.1, 0.11, 0)\n",
    "plt.pie(data,labels=label,autopct='%1.1f%%', startangle=15, shadow = True, colors=colors1, explode=move)\n",
    "\n",
    "plt.title('Crypto High values for '+ date)\n",
    "plt.axis('equal')\n",
    "plt.show()\n",
    "\n",
    "add = 1\n",
    "for x in range(0,times-1):\n",
    "    date1 = int(date[8])\n",
    "    date1 = date1*10+int(date[9])\n",
    "    date1+=add\n",
    "    ndate = str(date[0:8]) + str(date1) + \" 23:59:59\"\n",
    "\n",
    "    df3333 = df1.loc[df1['Date']==ndate]\n",
    "    df4444 = df3.loc[df3['Date']==ndate]\n",
    "    df5555 = df2.loc[df2['Date']==ndate]\n",
    "    num3 = df3333.iloc[0, 4]\n",
    "    num4 = df4444.iloc[0, 4]\n",
    "    num5 = df5555.iloc[0, 4]\n",
    "    colors3 = ['silver','gold','brown']\n",
    "    data1 = [num3,num4,num5]\n",
    "    plt.pie(data1,labels=label,autopct='%1.1f%%', startangle=15, shadow = True, colors=colors3, explode=move)\n",
    "    plt.title('Crypto High values for '+ ndate[0:10])\n",
    "    plt.axis('equal')\n",
    "    plt.show()\n",
    "    add+=1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This half pie charts are used to repressent the values of the high's for each coin that has been specified. It helps to show how each coin chnages per day. It provides an easy to understand visual, that even new traders can use to anayslse. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
